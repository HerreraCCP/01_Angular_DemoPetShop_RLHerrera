{"ast":null,"code":"export class CustomValidator {\n  constructor() {}\n\n  static isCpf() {\n    return control => {\n      const cpf = control.value.replace(/[^0-9]*/g, '');\n\n      if (cpf) {\n        let numbers;\n        let digits;\n        let sum;\n        let i;\n        let result;\n        let equalDigits;\n        equalDigits = 1;\n\n        if (cpf.length < 11) {\n          return null;\n        }\n\n        for (i = 0; i < cpf.length - 1; i++) {\n          if (cpf.charAt(i) !== cpf.charAt(i + 1)) {\n            equalDigits = 0;\n            break;\n          }\n        }\n\n        if (!equalDigits) {\n          numbers = cpf.substring(0, 9);\n          digits = cpf.substring(9);\n          sum = 0;\n\n          for (i = 10; i > 1; i--) {\n            sum += numbers.charAt(10 - i) * i;\n          }\n\n          result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n          if (result !== Number(digits.charAt(0))) {\n            return {\n              cpfNotValid: true\n            };\n          }\n\n          numbers = cpf.substring(0, 10);\n          sum = 0;\n\n          for (i = 11; i > 1; i--) {\n            sum += numbers.charAt(11 - i) * i;\n          }\n\n          result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n          if (result !== Number(digits.charAt(1))) {\n            return {\n              cpfNotValid: true\n            };\n          }\n\n          return null;\n        } else {\n          return {\n            cpfNotValid: true\n          };\n        }\n      }\n\n      return null;\n    };\n  }\n\n  static EmailValidator(control) {\n    // tslint:disable-next-line:max-line-length\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (!re.test(control.value)) {\n      return {\n        'E-mail inv√°lido': true\n      };\n    }\n\n    return null;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}